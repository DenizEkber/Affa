// <auto-generated />
using System;
using AFFA.src.DEPO.DataBase.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AFFA.Migrations
{
    [DbContext(typeof(AFFADbContext))]
    [Migration("20241116044819_AddPhotoBase64ToAuthors")]
    partial class AddPhotoBase64ToAuthors
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Bet", b =>
                {
                    b.Property<int>("BetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BetId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PredictedAwayScore")
                        .HasColumnType("int");

                    b.Property<int>("PredictedHomeScore")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("BetId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MatchId");

                    b.HasIndex("TeamId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ClubId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchId"));

                    b.Property<int>("AwayClubId")
                        .HasColumnType("int");

                    b.Property<int>("HomeClubId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MatchId");

                    b.HasIndex("AwayClubId");

                    b.HasIndex("HomeClubId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.MatchResult", b =>
                {
                    b.Property<int>("MatchResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchResultId"));

                    b.Property<int>("AwayScore")
                        .HasColumnType("int");

                    b.Property<int>("HomeScore")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.HasKey("MatchResultId");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("MatchResults");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Standing", b =>
                {
                    b.Property<int>("StandingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StandingId"));

                    b.Property<int>("ClubId")
                        .HasColumnType("int");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.HasKey("StandingId");

                    b.HasIndex("ClubId")
                        .IsUnique();

                    b.ToTable("Standings");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Bet", b =>
                {
                    b.HasOne("AFFA.src.DEPO.DataBase.Entity.Customer", "Customer")
                        .WithMany("Bets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AFFA.src.DEPO.DataBase.Entity.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AFFA.src.DEPO.DataBase.Entity.Club", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Match", b =>
                {
                    b.HasOne("AFFA.src.DEPO.DataBase.Entity.Club", "AwayClub")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AFFA.src.DEPO.DataBase.Entity.Club", "HomeClub")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayClub");

                    b.Navigation("HomeClub");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.MatchResult", b =>
                {
                    b.HasOne("AFFA.src.DEPO.DataBase.Entity.Match", "Match")
                        .WithOne("MatchResult")
                        .HasForeignKey("AFFA.src.DEPO.DataBase.Entity.MatchResult", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Standing", b =>
                {
                    b.HasOne("AFFA.src.DEPO.DataBase.Entity.Club", "Club")
                        .WithOne("Standing")
                        .HasForeignKey("AFFA.src.DEPO.DataBase.Entity.Standing", "ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Club", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Standing")
                        .IsRequired();
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Customer", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("AFFA.src.DEPO.DataBase.Entity.Match", b =>
                {
                    b.Navigation("MatchResult")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
